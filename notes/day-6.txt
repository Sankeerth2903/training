Nested classes:
classes can be nested inside
	a. another class 
	b. another interface
	c. a method inside a class or interface

types of nested classes
	a. static
	b. non-static
		i. Member inner class
		ii. anonymous inner class
		iii. Local inner class


class Address{}
class Person{
	Address address;
	public Person(){}
	public Person(Address address){
		this.address = address;
	}
	public void setAddress(Address address){
		this.address = address;
	}
}

interface Map<K,V>{
	class Entry<K,V>{
	}
}

class HashMap<K,V>{

	Set<Entry<K,V>> entries;
	public HashMap(){
		entries = new HashSet<Entry<K,V>>();
	}
}


A. a Non-static Class nested inside a class: (member inner class)
class A{
	class B{}
}

B. a static class nested inside a class:
class A{
	static class B{}
}

Person.java
class Person{
	Address address;
	public Person(){}
	public Person(Address address){
		this.address = address;
	}
	public void setAddress(Address address){
		this.address = address;
	}
}
class Address{}

Person.java
public class Person {
	private String name;

	public Person() {
	}

	public Person(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
}


Person$Address.java
	public class Person$Address {
		final Person this$0;
		private String location;
		
		public Person$Address() {
			this$0 = Person.this;
		}

		public Person$Address(String location) {
			this.location = location;
		}

		public void setLocation(String location) {
			this.location = location;
		}

		public String getLocation() {
			return this.location;
		}
		public String getInfo(){
			//return this.name +", "+this.location;
			return new StringBuilder(()).append(Person.access$000(Person.this)).append(this.location).toString();
		}
	}

c. anonymous class extending abstract/concrete class:
static class App$1 extends FileDataAccess{
	App$1(){}
	@Override
	public String getData() {
		return "data from XML file";
	}
}

Has-a relationship:
a. association
b. aggregation (A  -> B, B -> A)
c. composition (A  -> B, B -> A)

static class Person$1{
	@Override
	public int compare(Person o1, Person o2) {
		return Integer.compare(o1.getId(), o2.getId());
	}
}

class A{
	private int x;
	class C{
		public void test(){
			x = 10;
		}
	}
	public void foo(){
		final class B{
			x
		}
		B obj = new B();
	}
}

interface IA{
	class A{
	}
}

default method of interface:
	add extra features in existing contracts/implementation (interfaces/classes) with code without disturbing the existing classes which already implemented that interface
	used for backward compatibility

Collection<E>{
	default Stram<? extends T>stream(){
	}
}
List<E> extends Collection<E>{}
ArrayList<E> implements List<E>{}

interface Stream<T>{
	Stream<T> filter(Predicate<? extends T> p);
}

Fuctional Interfaces:
Predicate<T> => boolean test(T t);

Exception handling:
	runtime error
	ArithmeticException ar = new ArithmeticException("divide by zero");

	types of exceptions:
	a. checked exceptions: exceptions that are checked during compile-time, such as ClassNotFoundException.
	b. unchecked exceptions: exceptions that inherit from RuntimeException. they are not checked during compilation time.
	c. errors: you can't control and can't recover from that

	Hierarchy:
	Throwable
		Exception:
			RuntimeException
				ArithmetocException
				NullPointerException
				IndexOutOfBoundsException
					ArrayIndexOutOfBoundsException
					StringIndexOutOfBoundsException
			ClassNotFoundException
			SQLException
			IOException
		Error:
			StackOverflowError
			VirtualMachineError
			OutOfMemoryError

reflection
threading
jdbc

	







