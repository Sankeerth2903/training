DI:
class Injector<Tcontract,TImpl extends Tcontract>{ 
	public Tcontract createInstance(Class<TImpl> classInfo, Object dependencyObject){
		if(dependencyObject!=null){
			return classInfo.getDeclaredConstrucor(dependencyObject.getClass()).newInstance(dependencyObject);
		}else{
			//return classInfo.newInstance();	
			return classInfo.getDeclaredConstructor().newInstance();
		}
	}
}


Injector<DataAccess<Product>,ProductDataAccess> daoInjector = Injector.getInjector();
DataAccess<Product> productDao = daoInjector.createInstance(ProductDataAccess.class, null);

Injector<BusinessComponent<Product>,ProductBusinessComponent> businessInjector = Injector.getInjector();
businessInjector.createInstance(ProductBusinessComponent.class, productDao);	

BE:
class Product{}

DAL:
interface DataAccess<T>{
}
class ProductDataAccess implements DataAccess<Product>{
	public ProductDataAccess(){}
}
class CategoryDataAccess implements DataAccess<Category>{
	public CategoryDataAccess(){}
}

BL:
interface BusinessComponent<T>{
}
class ProductBusinessComponent implements BusinessComponent<Product>{
	private DataAccess<Product> productDao;
	
	public ProductBusinessComponent(){
		
	}
	public ProductBusinessComponent(DataAccess<Product> _productDao){
		productDao = _productDao;
	}

}
class CategoryBusinessComponent implements BusinessComponent<Category>{
	private DataAccess<Category> categoryDao;
	
	public CategoryBusinessComponent(DataAccess<Category> _categoryDao){
		categoryDao = _categoryDao;
	}

}


UI:
main(){
	
	Injector<DataAccess<Product>,ProductDataAccess> daoInjector = Injector.getInjector();
	DataAccess<Product> productDao = daoInjector.createInstance(ProductDataAccess.class);

	Injector<BusinessComponent<Product>,ProductBusinessComponent> businessInjector = Injector.getInjector();
	businessInjector.createInstance(ProductBusinessComponent.class, productDao);	

	
}



FACADE:
interface ServiceContract{
}
class PmsService implements ServiceContract{
}


J2EE: Java Enterprise Edition or Jakarta EE
      At the top of SE, an extra set if features and libraries (JARs) for ctreating enterprise application, such as
	- distributed application
	- web services etc.

a. create web application
b. create an web service
c. create enterprise services

URL:
1. protocol scheme (http, https, ftp etc.)
2. server-name (domain) joydip.com/google.com/abcd.org/xyz.net/amazon.in
3. port number: 8080 (0-65535)
4. object URI (Uniform resource identifier) pmsapp/index.html

http://joydip.com:8080/pmsapp/

JSON: JavaScript Object Notation
Java API for XML Web Service (JAX-WS)

wsdl: web service description language

proxy class => representing the original service class















