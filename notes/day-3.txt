1. object class and its members
2. static polymorphism
3. abstract class
4. interface
5. has-a relationship between entities
6. string class and its methods

7. exception handling
8. generic types (classes, methods, interfaces etc.)
9. collections

Polymorphism:
	multiple forms of
		a. operators
		b. methods

	types: compile time (static) and runtime (dynmaic)
	SC => (compiler) => byte code => MLC and executed

	compile time:
		1. operator overloading:
		example: +

		main(){
			add(10,20) //2 => calling part
			int a = 10;
			int b = 20;
			int res = a + b;

			String fname = "anil";
			String lname = "Kumar";
			String fullName = fname + lname; //fname.concat(lname);
		}
		add(int a, int b){}//4 => called function

		2. method overloading:
			a. number of arguments
			b. data type of arguments
			c. position of arguments
		note: return type does not act as a differentiation technique
		
		class Addition{
			public void add(int a, int b){}
			public void add(int a, int b, int c){}
			public void add(int a, int b, float f){}
			public void add(int a, float f,int b){}
		}
		main(){
			Addition addition = new Addiotion();
			addition.add(12,13); //1
			addition.add(12,13, 14);//2
			addition.add(12,13.45f, 14);//4
			addition.add(12,13, 14.45f);//3
		}

		dynamic:
		method overriding

		class Animal { public void makeSound(){}}
		class Bird {public void makeSound(){}}
		class Cat {public void makeSound(){}}

		main(){
			Animal animal = null;
			switch(choice){
				case 1: 
					animal = new Bird();
				break;
				case 2: 
					animal = new Cat();
				break;
				default:
				break;
			}
			if(animal !=null){
				animal.makeSound();
			}
		}

		differences between method overloading and method overriding:
		1. method overaloding is a technique to achieve compile time polymorphism
		whereas method overriding is a technique to achieve dynamic/run-time polymorphism

		2. method overaloding takes place in single class. whereas method overriding invloves at leat two classes, one base and one child

		3. overloaded methods should have difference in arguments, whereas the signature of all overriden methods must be same

		4. the code in method overlading is not important in the compile time polymorphism, whereas sole idea behind methid overriding is to provide new implementation of the inherited base class method and dynamically invoke one the child method out of many or one child class. hence the code inside the overriden methods rae of utmost importance.


Abstract class and abstract members:
a class is an abstract class, when at least one method is abstract in that class
in case of Java, declare the method with abstract keyword and simply don't provide any implementation
also the class must be declared with abstract keyword
you can have data member declaration, explicit constructors (default+parameterized), non-abstract methods, getters and setters

You can't create an instance of abstract class
when you inherit from the abstract base class, you MUST implement all abstract members of the base class in that child class. otherwise the child class in trun has to be declared with abstract keyword.

//abstract
abstract class A{
	protected String name;
	protected int id;

	public A(){}

	public A(String name, int id){ this.name = name; this.id = id;}

	public String getName() { return name;}
	public void setName(String value){name = value;}

	public String getId() { return id;}
	public void setId(int value){id = value;}

	public abstract String getSubject();
	public abstract void setSubject(String value);

	public abstract String getInfo();
}
//A obj = new A();
//concrete
class B extends A{
	String subject;

	public B(){}
	public B(String name, int id, String subject){ 
		super(name,id);
		this.subject = subject;
	}

	//abstract member implementation
	public String getSubject(){return subject;}
	public void setSubject(String value){subject = value;}

	public String getInfo(){ return name+" "+id+" "+subject;}
}

B obj = new B("harsh", 1, "Java");

String:
	bool equals(String other){
	}
if(str1.equals(str2))

Interface:
	- pure abstract class
	- no data members except final data members
	- abstract methods (regular methods, getters and setters)
	- interface members are by default - abstract and public (DON'T USE ACCESS SPCIFIER OR MODIFIRE WITH THEM)
	- you can't write any constructor explicitly
	- you can't create an instance of Interface
	- if you implement this interface in a class, that class must implement all the abstract members, otherwise that class will be (has to be) declared with abstract keyword
	- interfaces act like contracts: they provide information about which methods are implemented in a class

class A { public void foo(){} public void fooA(){}}
class B { public void foo(){} public void fooB(){}}
class C: public A, public B { public void fooC(){}}

C objC = new C();
c.foo();

interface IA { void foo(); void fooA(); }
interface IB { void foo(); void fooB();}
class C implements IA, IB { 
	public void foo(){}
	public void fooA(){}
	public void fooB(){}
	public void fooC(){}
}

C objC = new C();
c.foo();

Generic Type Parameter:
	T => Type
	E => Element
	K => Key
	V => Value
	N => Number
? => wildcard element

<? extends Number>
<? super Integer>




		
