1. Dependency injection and loose coupling vs tight coupling :

Dependent class and dependency factor class:
Dependent class will be affected if following things happen with Dependency factor:

Change the name
Class is abstract
Class constructor throws error 

Solution:
Don't create instance of dependency factor inside dependent class directly 
Get the object of dependency factor created somewhere else and get that object injected in the dependent class object

The place where object of dependency factor is created is known as IOC container
The way of injecting the dependency factor object inside dependent class object is known as Dependency Injection
The entire principle of creating instance of dependency factor inside a container and get that injected inside dependent object is known as Inversion of Control (IOC)

This is one of the SOLID principle (D)

2. SOLID:

S=Single Responsibility
O=Open close
L=
I=interface segregation
D=dependency injection 

3. singleton pattern:
creating single instance of a class
Not more than one instance 

4. static keyword, final and static final keyword

5. JAR files

6. has-a relationship
7. Optional<T> and optional argument declared with default value in function

8. collection classes

Iterable => Collection (interfaces)

		List => 
			ArrayList, LinkedList [also implements Deque], Vector => Stack (concrete classes)
		Queue => 
			PriorityQueue (concrete class)
			Deque (interface) => ArrayDeque

		Set => 
			HashSet, LinkedHashSet (concrete classes)
			SortedSet (interface) => TreeSet (concrete class)

		Map => 
			HashMap (class) => LinkedHashMap (class)
			SortedMap (interface) => TreeMap

joydip => asdhgcvjasvcjhsa541236532135jbsdvcnxzbkjcnhsa


2^128/256 => x hash codes
hashing:
		hashfunction(value,key) => hashcode

dell => set.add(dell) => dell.hashCode() => 31
hp => set.add(hp) => hp.hascode() => 31

	

	



