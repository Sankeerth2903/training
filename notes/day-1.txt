what is java?
	- a programming language as well as a platform
	- OOP language
	- high level language
	- Sun microsystem invented Java in 1995
	- James Gosling and his team (Greenteam)
	- initial name was Oak

Platform: a h/w or s/w environment where a program/an application is developed, compiled and run. In order to run a Java application, since we use a runtime, known as JRE (Java Runtime Environment) and APIs, it is called a platform.

JVM: Java Virtual Machine. when you run a java application JRE is the runtime environment which creates an JVM instance and that JVM does rest of the task, ex: loading class file in JRE, converting byte code into MLC using JIT, starting the execution from main method etc.

Different types of Application created using Java:
a. web applications
b. mobile applications
c. desktop applications
d. enterprise applications
e. embeded applications
f. Gaming applications
g. Robotics
etc. 

Categroies of Application created using Java:
a. Standalone application
b. Web Application
c. Enterprise application
d. Mobile applications

Java Platforms/Editions:
1. Java SE: for core Java applications and provides features and APIs to create multithreaded application, application to fetch data from file, netwroking etc.
2. Java EE: for web and enterprise applications. built at the top of SE of Java. [JSP-Servlet, Web Services (JAX-WS), EJB (Enterprose Java Beans), JPA (Java Persistant API) etc.]
3. Java ME: for mobile applications
4. Java FX: for creating RIA (rich internet applications). provoide4s APIs to create UI based applications.

Naming convention:
	class name must use pascal casing: first letter or every word in multi-word name, must be in upper case
	class EmployeeInfo{} or class Program{}
	class name inside a file and the file name should be same
	Program.java => Program

	method names must follow camel-casing:m in a mutli-word or single word function name, the first letter of first word must be in lowercase and first letter of every other word must be in uppercase
	ex: add(), addNumbers()

	local variable in a method should also follow camnel casing.

static: if a member of a class is declared static, then in order to access that member, you do not need to create an instance of that class. You can access that member using class name.
	Program.print() [from outside the class as well as from inside the class]
	print(); [from inside the class]

	a static member can access only another static member

why main method is static?
	main method is not called/invoked by you explicitly. when the byte code of main method is converted to machine level code, the JRE will automatically/implicitly invoke the main method from your class. In that case to avoid object creation of Program class, we declare the method as static.


data types in Java:
	primitive types: 
		boolean, 
		char, 
		byte, short, int , long, 
		float and double
	non-primitive types:
		built-in: Array, String etc.
		user-defined: class, interface etc.

operators in Java:
	involvement of number of operands:
		i. unary ii. binary iii. ternary

		int a =0; int b = 20;		?:
		a++; ++a; int res = a+b; int res = a > b ? a : b;
		a--; --a;

	types of work/job:
		a. arithmetic: +, /, -, *, %
		b. relational: 
			comparison: >, <, >=, <=, instanceof
			equality: ==, !=
		c. logical: &&, ||
		d. shift operator: <<, >> , >>>
		e. Bitwise: & (bitwose AND), ^ (bitwise exclusive OR), | (bitwise inclusive OR)
		e. assignment: =, +=, -=, *=, /=, %=, ^=, |=, <<=, >>=, >>>=
		f. incremental and decremental: ++, --

control flow statements in Java:
	if(condition){}
	else {}

	int a =10;
	int b = 20;
	int c = 30;
	if(a>b){
		if(a>c){
		}
		else{
		}
	}else if(b>c){
		
	}

	int choice = 1;
	//if(choice==1){} else if(choic==2){}
	switch(choice){
		case 1:
			break;

		case 2:
			break;

		default:
			break;
	}

	int x = 5;
	while(x >=0){
		//code
		x--;
	}

	do{
		//code
		x--;
	}while(x>=0);





	

	